Under the present assignment, two programs, say, server.c and worker.c have to be written which will be compiled into two executable files, say, server.out and worker.out, respectively.

At any point time, only one process will run the executable file server.out . However, there can be multiple (say, n number of) processes running worker.out.

That is, there could be only one server process (executing server.out)  and n number of worker processes (running worker.out).

The server process is initiated by the command "./server.out", which then creates a  shared structure  "struct task"  (defined below) (say, struct task  *solve, where solve points to a shared memory segment) which is shared by all  n worker processes.

struct task {

     char data[100]; /* The array to hold a null-terminated string put by the server process and used by one worker process to find the string-length and put it back here itself. */

     pid_t worker_pid; /* The pid of the worker process that is computing (or has computed)  the length of the string in array data. */

     int status; /* status = 0 means that at present there is nothing in the array data[ ] that needs to be worked on by a worker process. status = 1 means that the server process has put some string in the array data[ ] that needs to be worked on by a worker process. status = 2 means that a worker process having pid = worker_pid has started computing the length of the string in the array data[ ]. status = 3 means that the worker process having pid = worker_pid has computed the length of the string in the array data[ ] and put the computed length in the space for the array data[] itself. status = 4 means that the server process is using the "length" available in data[ ] computed by a worker process. status = -1 means that the server process has ended. */
}

At first, the server process creates and initializes the shared structure pointed to by struct task *solve by making the status field to be 0.  Subsequently, in an infinite loop the server process does the following.

    puts some (random, generated by rand()) null-terminated string in the array data[ ] (and updates status = 1).
    waits for status to become 3 (that is, some worker process has computed the length of the string and put it in data[ ]).
    "uses", that is, prints the number (length) from  data[ ] and the pid of the worker process that computed the length of the string (after making status = 4).

When terminated by ^C (ctrl + c), the server process makes status = -1.

Each worker process does the following in an infinite loop as long as the server process is not terminated (that is, status != -1).

    waits for status to become 1 (that is, the server process has put a null-terminated string  in data[ ] whose length needs to be computed.
    makes status = 2 (from 1),  puts its own pid into worker_pid and starts computing the length of the null-terminated string in data[ ].
    makes status = 3 after finding the length and putting it in data[ ].

A worker process terminates when it finds status  = -1.

Please remember that there will be two different programs, namely, server.c and worker.c which are to be executed to create the server process and the worker processes. These programs are to be executed independently from different terminals.

The server process and worker processes  should not attempt to release shared memory segment that has been created during execution. The server process creates a new shared memory segment  only if it has not already been created. Otherwise it uses the existing shared memory segment.

The server process and the worker processes should print meaningful messages reflecting what they are doing.